[
  
  {
    "title": "Chirpy主题的进阶使用",
    "url": "/posts/customize-my-blog/",
    "date": "2024-04-22 16:45:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . 本文介绍Chirpy主题的几个进阶使用案例，包括自定义网页布局、优化文本搜索、配置评论系统等。其中一些案例会涉及到底层代码的修改，要求读者具备一定的编程基础。 . 关于Chirpy主题的安装、配置、基础使用等内容，请阅读Jekyll博客搭建教程（下篇）。 . 自定义网页布局 . Favicon设置 . Chirpy主题的favicon存放在目录assets/img/favicons/下，用户可以使用Favicon Generator生成favicon文件，再替换掉目录中的预设favicon即可。 . 语言和字体 . 博客的默认语言为英语，可以设置_config.yml中的lang变量来修改，变量取值详见ISO语言代码（如英语的lang取值为en，中文的lang取值为zh-CN）。 . 每种语言对应一套默认字体，如英语默认的标题字体为Lato，段落字体为Source Sans Pro。如果要自定义，需要修改样式文件_sass/addon.variables.scss，参考这篇说明。 . | 1 2 3 . | /* fonts */ $font-family-base: 'Source Sans Pro', 'Microsoft Yahei', 'PingFang SC', sans-serif !default; $font-family-heading: Lato, 'Microsoft Yahei', 'PingFang SC', sans-serif !default; . | . 至于为何会特意提到自定义字体，因为预设的中文字体太难看了，便改用了PingFang SC作为默认项。 . 侧边菜单栏排序 . 侧边菜单栏选项的默认排序为： . | HOME | CATEGORIES | TAGS | ARCHIVES | ABOUT | . 如果要更改顺序，则需前往_tabs目录修改相应文件。以archives选项为例，我们需要修改_tabs/archives.md： . | 1 2 3 4 5 . | --- layout: archives icon: fas fa-archive order: 3 --- . | . 其中，layout项表示前往_layouts目录，读取_layouts/archives.html作为网页模版；icon项表示使用fa-archive作为icon图标，更多图标详见Font Awesome 4；order项指定了选项在菜单栏中的顺序。 . 例如，我想把archives选项放在菜单栏的第一位，只需将order项设置为1。 . 创建和删除子页面 . 现在，我希望在个人网站上创建一个留言板，放在网站子页/treehole/下。我们可以向_tabs目录添加模版文件_tabs/treehole.md来实现这一需求。 . | 1 2 3 4 5 . | --- layout: treehole icon: fas fa-tree order: 2 --- . | . 这样，网站会自动生成子页面/treehole/，并读取_layouts/treehole.html作为该页面的模版，我们可以在模版文件treehole.html中写入自己想要的模块，给网页添加新的功能。以下是html模版的一个简单示例（没有添加任何模块，只是输出‘Hello, world!’）： . | 1 2 3 4 5 6 . | --- layout: page # The layout for Treehole page --- &lt;p&gt;Hello, world!&lt;/p&gt; . | . 同样的，如果想要删除某个子页面，比如标签页/tags/（因为我讨厌打标签），只需删除对应的模版文件_tabs/tags.md。 . 优化文本搜索 . 本节旨在讨论博客文本搜索功能的实现思路，并针对原搜索算法的不足提出一些改进优化。如果想在博客中更新文本搜索功能，可以fork我的博客仓库。 . 博客的文本搜索可分解为三个步骤： . | 读取用户输入的关键词 | 遍历博客的所有文章检索关键词 | 输出包含关键词的文章 | . Chirpy主题在博客中内置了文本搜索功能，使用的搜索算法是Christian Fei的Simple Jekyll Search。该算法的实现思路是创建一个文本数据集search.json，将每篇文章作为一级对象，文章的title、author、content等信息作为二级对象，写入json文件中。数据模版如下： . | 1 2 3 4 5 6 7 8 9 . | { { \"title\": \"post.title\", \"url\": \"post.url\", \"date\": \"post.date\", \"categories\": \"post.categories\", \"content\": \"post.content\" } } . | . 这样一来，要在博客的文章中检索关键词，不用到每个文章的html页面一一查找，只需遍历一遍json文件即可。虽然实现思路很好，但实际写出来的代码却是一言难尽，而且原项目在2022年3月就停止维护了，你甚至找不到作者提修改建议。 . 精准搜索 . 首当其冲的问题是Simple Jekyll Search居然不支持精准搜索，考虑下面这个例子。我想搜索所有包含短语let it go的文章，这个句子会出现在搜索结果中： . Let's take a photo here. I'll print it on my shirt and go to school. 这显然是不合理的，我希望这三个单词作为一个整体在句中出现，而不是去分别检索三个单词： . Let it go, since tomorrow is another day. 经过阅读相关讨论，我发现文本的精准匹配这个问题，实际上已经被作者修复了： . | Simple-Jekyll-Search/issues/182 | Simple-Jekyll-Search/pull/166 | . 既然这个问题已经被解决了，为什么搜索结果还是那么奇怪呢？仔细阅读项目代码，会发现非常坑的一点，作者虽然在源文件/src/更新了代码，却没有在/dest/重新编译项目。 . | Q：bug修了吗？ A：修了 Q：修好了吗？ A：如修 | . 因此，我们需要重新编写搜索算法，并替换掉原先失效的算法库。具体步骤如下： . | 在/assets/lib/simple-jekyll-search/simple-jekyll-search.js中重写了精确匹配的搜索算法； | . | 1 2 3 4 5 6 7 8 9 . | function LiteralSearchStrategy () { this.matches = function (str, crit) { if (!str) return false str = str.toLowerCase() crit = crit.toLowerCase() return str.indexOf(crit) &gt;= 0 } } . | . | 使用在线转换将.js文件转成.min.js格式，生成的新文件为/assets/lib/simple-jekyll-search/simple-jekyll-search.js； | 在_data/orginal/cors.yml中修改了搜索算法的引用地址。 | . | 1 2 3 . | search: # js: https://cdn.jsdelivr.net/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js js: /assets/lib/simple-jekyll-search/simple-jekyll-search.min.js . | . 此外，我对文本数据assets/js/data/search.json做了一些格式上的优化，使搜索结果更为精确，在此不做详细说明。 . 搜索结果展示 . 另一个问题是，Simple Jekyll Search虽然能告诉你哪些文章包含关键词，但它不会显示关键词具体出现在文章的哪个位置。这是Chirpy主题的一个关键词检索示例： . 可以看到，搜索引擎只是简单列出了包含关键词Chirpy的文章标题和简介，而实际上我更想知道关键词在这些文章中出现的位置，以及提及关键词的前后文。这篇博客提出了一种可行的优化思路：Simple Jekyll Search在完成全局搜索后，会输出所有包含关键词的文章。此时对这些文章再重复做一次关键词检索，记录下关键词在一篇文章中首次出现的位置，输出该位置向前数的50个字符（上文）和向后数的50个字符（下文）。 . 我在_includes/search_loader.html中实现了这个思路，以下是部分代码片段： . | 1 2 3 4 5 6 7 8 9 10 11 12 . | var input = document.getElementById(\"search-input\").value.toLowerCase(); let firstOccurrence = value.toLowerCase().indexOf(input); if (firstOccurrence != -1) { let start = firstOccurrence - 50; if (start &lt; 0) { start = 0; } while (start &gt; 0 &amp;&amp; value[start-1] != \" \" &amp;&amp; value[start-1] != \"，\" &amp;&amp; value[start-1] != \"。\") { start--; } return `${value.substring(start, firstOccurrence)}&lt;mark style=\"background-color: rgba(255, 255, 153, 0.5);\"&gt;${value.substring(firstOccurrence, firstOccurrence+input.length)}&lt;/mark&gt;${value.substring(firstOccurrence+input.length, start+250)}`; } . | . 优化后的搜索结果如图，改进后的算法能标注出关键词所在位置，并给出提及关键词的上下文。 . 配置评论系统 . Chirpy主题支持为文章添加评论系统，在config.yml的comments一项中设置，可选择的评论系统有 . | disqus | utterances | giscus | . 这里以giscus为例，说明如何在博客中开启评论。先在config.yml中声明开启gicus。 . | 1 2 3 . | comments: # Global switch for the post comment system. Keeping it empty means disabled. provider: giscus # [disqus | utterances | giscus] . | . 再前往giscus app，按网页要求进行操作： . | 将博客repository的访问权限设置为public； | 下载giscus； | 访问博客所在的repository，在Settings&gt;General&gt;Features一栏中勾选上Discussions。 | . 在giscus app中填入博客repository的地址，获取giscus的配置参数，填入config.yml中的对应项。 . | 1 2 3 4 5 6 7 8 9 10 11 . | # Giscus options › https://giscus.app giscus: repo: [ENTER REPO HERE] # &lt;gh-username&gt;/&lt;repo&gt; repo_id: [ENTER REPO ID HERE] category: [ENTER CATEGORY NAME HERE] category_id: [ENTER CATEGORY ID HERE] mapping: \"title\" # optional, default to 'pathname' strict: # optional, default to '0' input_position: \"top\" # optional, default to 'bottom' lang: # optional, default to the value of `site.lang` reactions_enabled: # optional, default to the value of `1` . | . 最后，重新生成静态网页并推送到GitHub仓库，就能在文章的评论区发表评论了。 . | 1 . | bundle exec jekyll s . | . 如果需要对giscus做更详细的配置，可在博客项目的根目录创建配置文件giscus.json，参考这篇giscus Advanced Usage进行配置。 . 结语 . 关于博客搭建的记录就此告一段落，希望我把教程写清楚了。最后感谢Chirpy为本站提供Jekyll主题，提供一些扩展阅读： . | Chirpy Wiki | 使用Chirpy模版进行Markdown写作 | Markdown渲染效果演示 | . "
  },
  
  {
    "title": "Jekyll博客搭建教程（下篇）",
    "url": "/posts/build-my-blog-2/",
    "date": "2024-04-21 20:17:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Chirpy是一款基于Jekyll架构开发的主题模版，主要面向技术类博客的写作，这是该主题的一个Demo。本站的主题也是由Chirpy主题魔改而来。 . 本文以Chirpy主题为例，介绍如何在Jekyll博客中应用主题模版，并将博客网站部署到GitHub Page上。其他主题的应用方法可能略有不同，但总体思路是一致的。 . 下载主题 . Chirpy主题有两种下载方法： . | Chirpy Starter | Git | . 两种方法均会使用到Git，请事先配置好Git的使用环境。 . Chirpy Starter . 前往官方的模版页面Chirpy Start，点击按钮Use this template &gt; Create a new repository，将新的repository命名为USERNAME.github.io，其中USERNAME为GitHub用户名。 . 再将项目下载到本地，并安装依赖库。（记得将USERNAME替换为GitHub用户名） . | 1 2 . | git clone https://github.com/USERNAME/USERNAME.github.io bundle . | . 这个方法适合只想专心写文章不想接触底层代码的用户。用户无需关注原项目中那一大坨html模版和js脚本，只需将文章添加至_post目录中即可实现博客的更新。当然不能修改代码也意味着，如果你想在原模版的基础上做些个性化修改，或是添加新的功能，用这个方法是无法实现的。 . Git . 作为一个事多的人，只是套用模版而不做任何修改是无法满足我的需求的，因此我采用了第二种方法：用Git将整个项目下载至本地。这样便能直接修改源代码，实现我想要的功能。 . | 1 . | git clone https://github.com/cotes2020/jekyll-theme-chirpy . | . 由于后续操作会生成JavaScript文件，需事先安装Node.js。再前往项目所在目录，运行初始化程序。 . | 1 . | bash tools/init . | . 完成初始化后，还需安装依赖库。 . | 1 . | bundle . | . 配置主题 . 主要配置 . 博客的配置信息存放在根目录的./_config.yml，常用的变量有： . | lang - 语言 | timezone - 时区 | title - 网站标题 | tagline - 网站副标题 | description - 网站描述 | url - 部署博客的地址，如https://USERNAME.github.io | avatar - 作者头像，如https://chirpy-img.netlify.app/commons/avatar.jpg | . 可选配置 . 在子目录_data下还存放有一些可选填的配置文件，主要用于设置网页的外观，可根据需求修改。以下是对这些配置文件的简要说明： . 博客的语言配置存放在_data/locate/，其中英语的配置文件为_data/locate/en.yml。如下面这段配置定义了英文语言下侧边菜单栏的选项名称。 . | 1 2 3 4 5 6 7 8 . | tabs: # format: &lt;filename_without_extension&gt;: &lt;value&gt; home: Home categories: Categories tags: Tags treehole: Treehole archives: Archives about: About . | . 文章的作者信息存放在_data/authors.yml，可填写多个作者。 . | 1 2 3 . | MsEspeon: name: MsEspeon url: https://github.com/ittousei/ . | . 侧边菜单栏的社交账号信息存放在_data/contact.yml。比如我不想显示Twitter，只需在配置文件中注释掉相应内容。 . | 1 2 . | # - type: twitter # icon: \"fa-brands fa-x-twitter\" . | . 文章的分享信息存放在_data/share.yml。比如我想分享文章到Twitter，可在配置文件中添加以下内容。 . | 1 2 3 4 . | platforms: - type: Twitter icon: \"fa-brands fa-square-x-twitter\" link: \"https://twitter.com/intent/tweet?text=TITLE&amp;url=URL\" . | . 本地测试 . 在服务器上部署博客前，可以先在本地http://localhost:4000预览网页的效果。 . | 1 . | bundle exec jekyll s . | . 注意：以上命令包含两个功能，一是根据项目文件生成静态网页文件，二是将静态网页部署至本地服务器。因此，在将博客部署到远程服务器之前，即使没有本地测试的需求，仍需运行一遍上述命令，以生成必要的静态网页文件。 . 部署至GitHub Page . 在实现本地运行后，我们将博客部署到GitHub Page上。在部署之前，我们需要做好以下准备工作： . | 在GitHub上创建博客专用的repository，并命名为USERNAME.github.io，USERNAME为GitHub用户名。 | 将本地的Chirpy-Jekyll项目关联至GitHub的仓库USERNAME.github.io。这一步我使用的是GitHub Desktop，一款基于Git的图形化界面，相对于Git更为简单易用，当然直接使用Git也能实现关联操作。 | 在本地项目的根目录运行： | . | 1 . | bundle lock --add-platform x86_64-linux . | . 然后，我们到GitHub上配置Page服务： . | 访问博客所在仓库USERNAME.github.io，点击Settings，在左侧菜单栏中选中Pages，再到Build and deployment的Source一栏选中GitHub Actions选项。 | . | 在GitHub Actions选项的下方将出现配置文件GitHub Pages Jekyll，点击Configure按钮，会显示配置文件的具体内容，再点击文件右上角的Commit changes...，即可在仓库中生成配置文件。 . | 最后，我们将配置文件同步到本地。完成上述步骤后，只要我们将代码push到GitHub的仓库中，GitHub Actions便会自动生成静态网页并部署到GitHub Page上。 . | . 如果需要在个人服务器上部署博客，可参考Chirpy官方文档，在本教程中不做额外说明。 . 更新博客 . 如果要在博客上发布新的文章，只需遵循以下步骤： . | 在_posts目录中添加新的Markdown文件。 | 执行命令生成静态网页： | . | 1 . | bundle exec jekyll s . | . | 推送至GitHub仓库，更新后的网页会自动部署到GitHub Page上。 | . 结语 . 通过简单的三步，我们实现了个人博客的搭建： . | 安装Jekyll框架生成博客的静态网页 | 应用Chirpy主题设置博客的布局 | 使用GitHub Page部署个人网站 | . 回顾下来，整个博客搭建的过程还是相当水到渠成的，没有遇上什么重大bug。当然，之所以过程这么顺利，是因为去年我已经尝试过使用Hexo搭建个人网站，不过当时的我十分头铁，妄图自己写一套网站的前端（此前没有前端经验，主要使用ChatGPT进行前端开发）。 . 结果也在预料之中，起初我对这个项目是兴致盎然的，然而随着开发的深入bug一个接一个的出现，我更新代码的频率也逐渐降低，后来我的旧电脑不幸故障开不了机，再到换了新的MacBook，我的代码也没拷贝到新电脑上，这个旧电脑上的前端项目便不了了之了。 . 有点偏题了，还是说回正题。这次博客的搭建历时两天，4.19完成了Chirpy主题的应用和GitHub Page的部署，4.20实现博客布局的个性化、优化搜索算法、以及添加评论系统。本教程主要记录了4.19的工作，4.20主要是一些基于个人审美而做的改动，在本文的后续Chirpy主题的进阶使用中说明。最后，就简单用一句话收尾吧： . 搭建个人博客很简单，因为我们站在巨人的肩膀上。 "
  },
  
  {
    "title": "Jekyll博客搭建教程（上篇）",
    "url": "/posts/build-my-blog-1/",
    "date": "2024-04-21 12:10:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Jekyll是一个轻量级的静态网站生成器，它采用Liquid作为模板语言，支持用户自定义网页的外观布局、使用Markdown创作发布内容。本文介绍如何使用Jekyll搭建个人网站，内容参考自Jekyll的说明文档。 . 环境安装 . Jekyll要求安装以下环境： . | Ruby | RubyGems | Jekyll | . 我的操作系统是Ventura(macOS 13)，因此主要基于mac的安装流程进行说明，其他系统的安装步骤类似，这里仅给出文档链接不做具体说明。 . 安装Ruby和RubyGems . Ruby的安装详见Jekyll Installation。根据需求选择合适的版本，Jekyll要求Ruby版本高于2.5.0，本文使用的版本为3.1.3。RubyGems捆绑在Ruby的安装包中，无需额外下载。 . 对于Windows/Linux等系统，请按照Jekyll文档的说明进行安装，并跳过本章节阅读下一章使用Jekyll搭建博客。 . 在macOS下，可使用ruby-install安装Ruby，和使用chruby配置环境： . | 安装Homebrew | . | 1 . | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . | . | 使用Homebrew安装chruby和ruby-install | . | 1 . | brew install chruby ruby-install xz . | . | 使用ruby-install安装Ruby | . | 1 . | ruby-install ruby 3.1.3 . | . | 使用chruby配置环境 | . | 1 2 3 . | echo \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrc echo \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrc echo \"chruby ruby-3.1.3\" &gt;&gt; ~/.zshrc # run 'chruby' to see actual version . | . | 检查安装是否成功 | . 退出并重启（注意要重开一个窗口）Terminal终端，运行以下命令： . | 1 . | ruby -v . | . 运行结果显示ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e)（或是更高版本）即安装成功。 . 安装Jekyll . 使用Ruby的包管理器RubyGems可直接下载Jekyll。 . | 1 . | gem install jekyll . | . 使用Jekyll搭建博客 . 在上一节中我们安装了前置环境，现在我们创建一个Jekyll项目来生成博客网页。 . 我们选择Bundle来管理Jekyll的项目环境。对于不同的Jekyll项目，可以用Bundle分别搭建独立的依赖环境，而不相互干扰。使用Bundle创建Jekyll项目的流程如下： . | 使用RubyGems下载bundle | . | 1 . | gem install bundler . | . | 在./myblog路径下创建Jekyll项目 | . | 1 2 . | jekyll new myblog cd myblog . | . | 运行项目生成博客网页 | . | 1 . | bundle exec jekyll serve . | . 可以在http://localhost:4000本地浏览网页。 . 自定义博客外观 . 通过创建Jekyll项目，我们生成了一个简易的网站。当然这个网站十分简陋，和一个功能完备的现代博客相去甚远，下一步就是美化网页的外观以及添加更多的功能了。 . 一个选择是自己写一套前端，可以参考这篇教程Step by Step Tutorial，其中的工作量无疑是巨大的。另一个选择是使用别人写好的模版，Jekyll拥有成熟的主题开发生态，用户可以从海量的主题模版中挑选出适合自己的那一款。我们可以在他人模版的基础上，根据自己的需求做一些自定义修改。 . 下面列出一些常用Jekyll主题站点： . | GitHub.com #jekyll-theme repos | jamstackthemes.dev | http://jekyllthemes.org/ | https://jekyllthemes.io/ | jekyll-themes.com | . 关于主题设置的更多内容，参考Jekyll Themes。在下篇中，我将详细介绍本站采用的主题，即Chirpy主题的配置和使用。 . "
  }
  
]

